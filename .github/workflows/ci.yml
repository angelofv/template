name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  lint:
    name: üßπ Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Ruff lint
        run: make lint

  test:
    name: ‚úÖ Tests unitaires
    needs: lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: "3.10"

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run pytest
        run: make test

  integration:
    name: üîó Test d'int√©gration Docker
    needs: test
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repo
        uses: actions/checkout@v3

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v2

      - name: Build all images
        run: docker-compose build

      - name: Start MLflow & Prefect
        run: docker-compose up -d mlflow prefect

      - name: Wait for Prefect API
        run: |
          echo "‚è≥ Attente de Prefect..."
          until curl -s http://localhost:4200/api/health >/dev/null; do
            sleep 1
          done
          echo "‚úÖ Prefect pr√™t !"

      - name: Run application
        run: |
          echo "‚ñ∂Ô∏è Lancement de app (one-shot)‚Ä¶"
          docker-compose up --abort-on-container-exit --exit-code-from app app

      - name: Teardown
        if: always()
        run: docker-compose down -v
