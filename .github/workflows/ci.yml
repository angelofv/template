name: CI

on:
  push:
    branches: [ main ]
  pull_request:
    branches: [ main ]

jobs:
  build-and-smoke-test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [ '3.10' ]

    steps:
      - name: Checkout repository
        uses: actions/checkout@v3

      - name: Set up Python ${{ matrix.python-version }}
        uses: actions/setup-python@v4
        with:
          python-version: ${{ matrix.python-version }}

      - name: Cache pip
        uses: actions/cache@v3
        with:
          path: ~/.cache/pip
          key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
          restore-keys: |
            ${{ runner.os }}-pip-

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Lint with ruff
        run: make lint

      - name: Run tests & collect coverage
        run: make test

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: tests/coverage.xml
          fail_ci_if_error: true
          verbose: true

      - name: Smoke-test Docker Compose
        run: |
          # 1) Spin up mlflow & prefect
          docker compose up -d mlflow prefect

          # 2) Build & start app
          docker compose up -d --build --no-deps app

          # 3) Wait for the app container to exist
          echo "‚è≥ Waiting for the app container to appear..."
          until [ -n "$(docker compose ps -q app)" ]; do
            sleep 1
          done

          APP_ID=$(docker compose ps -q app)
          echo "üëç Found app container: $APP_ID"

          # 4) Wait for it to exit (non-zero exit code will fail the job)
          echo "‚è≥ Waiting for the app container ($APP_ID) to finish..."
          docker wait "$APP_ID"

          # 5) Cleanup
          docker compose down -v
